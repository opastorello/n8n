services:
  # Chatwoot: Plataforma de atendimento ao cliente
  # Combina rails (web) e sidekiq (workers) para chats em tempo real
  chatwoot:
    image: ghcr.io/fazer-ai/chatwoot:latest
    pull_policy: always
    container_name: chatwoot
    restart: always
    ports:
      - "3001:3000" # Porta para interface web
    volumes:
      - chatwoot_data:/app/storage # Persistência de dados
      - chatwoot_logs:/app/log # Persistência de logs
    environment:
      # Configurações gerais
      NODE_ENV: production
      RAILS_ENV: production
      INSTALLATION_ENV: docker
      DEFAULT_LOCALE: pt_BR
      FRONTEND_URL: ${FRONTEND_URL}
      INTERNAL_HOST_URL: http://chatwoot:3000
      SECRET_KEY_BASE: ${SERVICE_PASSWORD_64_SECRETKEYBASE}
      TIMEZONE: ${GENERIC_TIMEZONE}
      # Configurações do banco de dados PostgreSQL
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USERNAME: ${SERVICE_USER_POSTGRES}
      POSTGRES_PASSWORD: ${SERVICE_PASSWORD_POSTGRES}
      POSTGRES_DATABASE: ${POSTGRES_DB:-chatwoot_production}
      # Configurações do Redis
      REDIS_URL: redis://default:${SERVICE_PASSWORD_REDIS}@redis:6379
      REDIS_PASSWORD: ${SERVICE_PASSWORD_REDIS}
      # Configurações do RabbitMQ
      AMQP_HOSTNAME: rabbitmq
      AMQP_USERNAME: ${RABBITMQ_USER}
      AMQP_PASSWORD: ${RABBITMQ_PASSWORD}
      AMQP_PORT: 5672
      AMQP_VHOST: "/"
      # Integração com Baileys API (WhatsApp)
      BAILEYS_PROVIDER_DEFAULT_CLIENT_NAME: ${BAILEYS_PROVIDER_DEFAULT_CLIENT_NAME}
      BAILEYS_PROVIDER_DEFAULT_URL: http://baileys-api:3025
      BAILEYS_PROVIDER_DEFAULT_API_KEY: ${SERVICE_PASSWORD_64_BAILEYSDEFAULTAPIKEY}
      BAILEYS_PROVIDER_USE_INTERNAL_HOST_URL: "true"
      # Integração com MinIO (armazenamento)
      ACTIVE_STORAGE_SERVICE: minio
      AWS_ACCESS_KEY_ID: ${MINIO_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_PORT_ROOT_PASSWORD}
      AWS_REGION: us-east-1
      AWS_BUCKET: chatwoot
      AWS_HOST: minio:9000
      AWS_ENDPOINT: http://minio:9000
      AWS_PATH_STYLE: true
      # Configurações de SMTP
      MAILER_SENDER_EMAIL: ${MAILER_SENDER_EMAIL}
      SMTP_ADDRESS: ${SMTP_ADDRESS}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_AUTHENTICATION: plain
    entrypoint: docker/entrypoints/rails.sh
    command:
      - bundle
      - exec
      - rails
      - s
      - '-p'
      - '3000'
      - '-b'
      - 0.0.0.0
    post_start:
      - command:
          - bundle
          - exec
          - rails
          - db:chatwoot_prepare
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      baileys-api:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- --header='Accept: text/html' http://127.0.0.1:3000/ || exit 1"]
      interval: 60s
      timeout: 20s
      retries: 10
    networks:
      - minha_rede

  # Chatwoot Sidekiq: Workers para processamento assíncrono
  chatwoot_sidekiq:
    image: ghcr.io/fazer-ai/chatwoot:latest
    pull_policy: always
    container_name: chatwoot_sidekiq
    restart: always
    volumes:
      - chatwoot_data:/app/storage #(branch: Persistência de dados
      - chatwoot_logs:/app/log # Persistência de logs
    environment:
      # Mesmas variáveis do serviço chatwoot
      NODE_ENV: production
      RAILS_ENV: production
      INSTALLATION_ENV: docker
      DEFAULT_LOCALE: pt_BR
      FRONTEND_URL: ${FRONTEND_URL}
      INTERNAL_HOST_URL: http://chatwoot:3000
      SECRET_KEY_BASE: ${SERVICE_PASSWORD_64_SECRETKEYBASE}
      TIMEZONE: ${GENERIC_TIMEZONE}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USERNAME: ${SERVICE_USER_POSTGRES}
      POSTGRES_PASSWORD: ${SERVICE_PASSWORD_POSTGRES}
      POSTGRES_DATABASE: ${POSTGRES_DB:-chatwoot_production}
      REDIS_URL: redis://default:${SERVICE_PASSWORD_REDIS}@redis:6379
      REDIS_PASSWORD: ${SERVICE_PASSWORD_REDIS}
      AMQP_HOSTNAME: rabbitmq
      AMQP_USERNAME: ${RABBITMQ_USER}
      AMQP_PASSWORD: ${RABBITMQ_PASSWORD}
      AMQP_PORT: 5672
      AMQP_VHOST: "/"
      BAILEYS_PROVIDER_DEFAULT_CLIENT_NAME: ${BAILEYS_PROVIDER_DEFAULT_CLIENT_NAME}
      BAILEYS_PROVIDER_DEFAULT_URL: http://baileys-api:3025
      BAILEYS_PROVIDER_DEFAULT_API_KEY: ${SERVICE_PASSWORD_64_BAILEYSDEFAULTAPIKEY}
      BAILEYS_PROVIDER_USE_INTERNAL_HOST_URL: "true"
      ACTIVE_STORAGE_SERVICE: minio
      AWS_ACCESS_KEY_ID: ${MINIO_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_PORT_ROOT_PASSWORD}
      AWS_REGION: us-east-1
      AWS_BUCKET: chatwoot
      AWS_HOST: minio:9000
      AWS_ENDPOINT: http://minio:9000
      AWS_PATH_STYLE: true
      MAILER_SENDER_EMAIL: ${MAILER_SENDER_EMAIL}
      SMTP_ADDRESS: ${SMTP_ADDRESS}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_AUTHENTICATION: plain
    command:
      - bundle
      - exec
      - sidekiq
      - '-C'
      - config/sidekiq.yml
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      baileys-api:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep [s]idekiq || exit 1"]
      interval: 20s
      timeout: 20s
      retries: 10
    networks:
      - minha_rede

  # Banco de Dados PostgreSQL
  postgres:
    image: pgvector/pg16
    container_name: postgres
    restart: always
    ports:
      - "5432:5432" # Porta padrão do PostgreSQL
    environment:
      POSTGRES_USER: ${SERVICE_USER_POSTGRES}
      POSTGRES_PASSWORD: ${SERVICE_PASSWORD_POSTGRES}
      POSTGRES_DB: ${POSTGRES_DB:-chatwoot_production}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=pt_BR.UTF-8"
      volumes:
      - postgres_data:/var/lib/postgresql/data # Persistência de dados
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -p 5432 -U ${SERVICE_USER_POSTGRES} -d ${POSTGRES_DB}"]
      interval: 20s
      timeout: 20s
      retries: 10
    networks:
      - minha_rede

  # Redis: Cache em memória
  redis:
    image: redis:alpine
    container_name: redis
    restart: always
    ports:
      - "6380:6379" # Porta mapeada para evitar conflitos
    environment:
      REDIS_PASSWORD: ${SERVICE_PASSWORD_REDIS}
    command: ["redis-server", "--requirepass", "${SERVICE_PASSWORD_REDIS}"]
    volumes:
      - redis_data:/data # Persistência de dados
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "localhost", "-p", "6379", "-a", "${SERVICE_PASSWORD_REDIS}", "ping"]
      interval: 20s
      timeout: 20s
      retries: 10
    networks:
      - minha_rede

  # Baileys API: Integração com WhatsApp
  baileys-api:
    image: ghcr.io/fazer-ai/baileys-api:latest
    pull_policy: always
    container_name: baileys-api
    restart: always
    ports:
      - "3025:3025" # Porta para API
    volumes:
      - baileys_data:/app/storage # Persistência de dados
    environment:
      NODE_ENV: production
      REDIS_URL: redis://default:${SERVICE_PASSWORD_REDIS}@redis:6379
      REDIS_PASSWORD: ${SERVICE_PASSWORD_REDIS}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      BAILEYS_LOG_LEVEL: ${BAILEYS_LOG_LEVEL:-error}
      BAILEYS_PROVIDER_DEFAULT_API_KEY: ${SERVICE_PASSWORD_64_BAILEYSDEFAULTAPIKEY}
    command:
      - sh
      - "-c"
      - "bun manage-api-keys create user ${SERVICE_PASSWORD_64_BAILEYSDEFAULTAPIKEY} && bun start"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:3025/status || exit 1"]
      interval: 20s
      timeout: 20s
      retries: 10
    networks:
      - minha_rede

  # n8n: Plataforma de automação de fluxos
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: always
    ports:
      - "5678:5678" # Porta para interface web
    environment:
      N8N_BASIC_AUTH_ACTIVE: "true"
      N8N_BASIC_AUTH_USER: ${N8N_USER}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_PASSWORD}
      N8N_HOST: host.docker.internal
      WEBHOOK_URL: ${WEBHOOK_URL}
      N8N_PROTOCOL: "http"
      N8N_PORT: 5678
      N8N_SECURE_COOKIE: "false"
      GENERIC_TIMEZONE: ${GENERIC_TIMEZONE}
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_USER: ${SERVICE_USER_POSTGRES}
      DB_POSTGRESDB_PASSWORD: ${SERVICE_PASSWORD_POSTGRES}
      DB_POSTGRESDB_DATABASE: ${POSTGRES_DB}
      QUEUE_MODE: redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${SERVICE_PASSWORD_REDIS}
      N8N_LOG_LEVEL: debug
      N8N_LOG_OUTPUT: file
      N8N_LOG_FILE_LOCATION: /home/node/.n8n/n8n.log
      N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE: "true"
      NODE_ENV: production
    volumes:
      - n8n_data:/home/node/.n8n # Persistência de configurações
      - n8n_logs:/home/node/.n8n/logs # Persistência de logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5678/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - minha_rede

  # Adminer: Interface web para gerenciamento do PostgreSQL
  adminer:
    image: adminer:latest
    container_name: adminer
    restart: always
    ports:
      - "8081:8080" # Porta para acesso web
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha
      ADMINER_PLUGINS: "tables-filter tinymce"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - minha_rede

  # Exportador de Métricas do PostgreSQL
  postgres_exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgres_exporter
    restart: always
    ports:
      - "9187:9187" # Porta para métricas
    environment:
      DATA_SOURCE_NAME: "postgresql://${SERVICE_USER_POSTGRES}:${SERVICE_PASSWORD_POSTGRES}@postgres:5432/${POSTGRES_DB}?sslmode=disable"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - minha_rede

  # Exportador de Métricas do Redis
  redis_exporter:
    image: oliver006/redis_exporter
    container_name: redis_exporter
    restart: always
    ports:
      - "9121:9121" # Porta para métricas
    environment:
      REDIS_ADDR: "redis:6379"
      REDIS_PASSWORD: ${SERVICE_PASSWORD_REDIS}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - minha_rede

  # Ollama: Execução de modelos de linguagem
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    restart: always
    ports:
      - "11434:11434" # Porta para API
    environment:
      OLLAMA_HOST: 0.0.0.0:11434
      OLLAMA_MODELS: /root/.ollama/models
      OLLAMA_KEEP_ALIVE: 5m
      OLLAMA_ORIGINS: "*"
    volumes:
      - ollama_data:/root/.ollama # Persistência de modelos
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:11434/api/tags || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - minha_rede

  # Prometheus: Sistema de monitoramento
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090" # Porta para interface web
    volumes:
      - prometheus_data:/prometheus # Persistência de dados
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - postgres_exporter
      - redis_exporter
      - node_exporter
    networks:
      - minha_rede

  # Node Exporter: Métricas do host
  node_exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    restart: always
    ports:
      - "9100:9100" # Porta para métricas
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - minha_rede

  # Grafana: Visualização de métricas e logs
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    ports:
      - "3000:3000" # Porta para interface web
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-piechart-panel,grafana-simple-json-datasource
      GF_ANALYTICS_REPORTING_ENABLED: "false"
      GF_LOG_LEVEL: info
    volumes:
      - grafana_data:/var/lib/grafana # Persistência de dados
    depends_on:
      - prometheus
      - loki
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - minha_rede

  # Loki: Sistema de logs
  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: always
    ports:
      - "3100:3100" # Porta para API
    volumes:
      - loki_data:/loki # Persistência de logs
      - ./loki-config.yml:/etc/loki/loki.yml
    command:
      - '-config.file=/etc/loki/loki.yml'
    networks:
      - minha_rede

  # Promtail: Agente de coleta de logs
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    restart: always
    volumes:
      - /var/log:/var/log:ro
      - ./promtail-config.yml:/etc/promtail/config.yml
    command:
      - '-config.file=/etc/promtail/config.yml'
    depends_on:
      - loki
    networks:
      - minha_rede

  # MinIO: Armazenamento de dados
  minio:
    image: minio/minio:latest
    container_name: minio
    restart: always
    ports:
      - "9000:9000" # Porta para API
      - "9001:9001" # Porta para consola web
    environment:
      MINIO_ROOT_USER: ${MINIO_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_PORT_ROOT_PASSWORD}
    volumes:
      - minio_data:/data # Persistência de dados
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 3s
      retries: 3
    networks:
      - minha_rede

  # RabbitMQ: Sistema de mensagens de filas
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672" # Porta AMQP
      - "15672:15672" # Porta para interface web
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: "/"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq # Persistência de dados
      - rabbitmq_logs:/var/log/rabbitmq # Persistência de logs
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - minha_rede

volumes:
  postgres_data:
  redis_data:
  n8n_data:
  n8n_logs:
  baileys_data:
  chatwoot_data:
  chatwoot_logs:
  ollama_data:
  prometheus_data:
  grafana_data:
  loki_data:
  minio_data:
  rabbitmq_data:
  rabbitmq_logs:

networks:
  minha_rede:
    driver: bridge
