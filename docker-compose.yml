version: '3.8'
services:
  # Banco de Dados PostgreSQL
  # Armazenamento relacional com suporte a UTF-8 e localização pt_BR.
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: unless-stopped
    ports:
      - "5432:5432" # Porta padrão do PostgreSQL
    environment:
      POSTGRES_USER: ${POSTGRES_USER} # Usuário do banco
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} # Senha do banco
      POSTGRES_DB: ${POSTGRES_DB} # Nome do banco
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=pt_BR.UTF-8" # Codificação e localização
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persistência de dados
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"] # Verifica disponibilidade
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - minha_rede

  # Adminer: Interface web para gerenciamento do PostgreSQL
  # Interface leve para administração de bancos de dados.
  adminer:
    image: adminer:latest
    container_name: adminer
    restart: unless-stopped
    ports:
      - "8081:8080" # Porta para acesso web
    environment:
      ADMINER_DEFAULT_SERVER: postgres # Servidor padrão
      ADMINER_DESIGN: pepa-linha # Tema visual
      ADMINER_PLUGINS: "tables-filter tinymce" # Plugins para filtragem e editor
    depends_on:
      postgres:
        condition: service_healthy # Inicia após PostgreSQL estar saudável
    networks:
      - minha_rede

  # Backup Automático do PostgreSQL
  # Realiza backups diários com retenção configurável.
  postgres_backup:
    image: prodrigestivill/postgres-backup-local
    container_name: postgres_backup
    restart: unless-stopped
    environment:
      POSTGRES_HOST: postgres # Host do banco
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_EXTRA_OPTS: "-Z9 --schema=public" # Opções de compactação
      SCHEDULE: "@daily" # Backup diário
      BACKUP_KEEP_DAYS: 7 # Retenção de backups diários
      BACKUP_KEEP_WEEKS: 4 # Retenção de backups semanais
      BACKUP_KEEP_MONTHS: 6 # Retenção de backups mensais
      BACKUP_DIR: /backups # Diretório de backups
      HEALTHCHECK_PORT: 8082 # Porta para healthcheck
    volumes:
      - postgres_backup:/backups # Persistência de backups
    depends_on:
      postgres:
        condition: service_healthy # Inicia após PostgreSQL estar saudável
    networks:
      - minha_rede

  # Exportador de Métricas do PostgreSQL
  # Coleta métricas para monitoramento via Prometheus.
  postgres_exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgres_exporter
    restart: unless-stopped
    ports:
      - "9187:9187" # Porta para métricas
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - minha_rede

  # Redis: Cache em memória
  # Usado para cache e filas em outros serviços.
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6380:6379" # Porta mapeada para evitar conflitos
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD} # Senha do Redis
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"] # Ativa autenticação
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"] # Verifica conectividade
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis_data:/data # Persistência de dados
    networks:
      - minha_rede

  # Exportador de Métricas do Redis
  # Coleta métricas do Redis para o Prometheus.
  redis_exporter:
    image: oliver006/redis_exporter
    container_name: redis_exporter
    restart: unless-stopped
    ports:
      - "9121:9121" # Porta para métricas
    environment:
      REDIS_ADDR: "redis:6379"
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - minha_rede

  # n8n: Plataforma de automação de fluxos
  # Integra serviços com fluxos de trabalho personalizados.
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: unless-stopped
    ports:
      - "5678:5678" # Porta para interface web
    environment:
      N8N_BASIC_AUTH_ACTIVE: "true" # Autenticação básica
      N8N_BASIC_AUTH_USER: ${N8N_USER}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_PASSWORD}
      N8N_HOST: "localhost"
      N8N_PROTOCOL: "http" # Alterado para http, já que secure cookie está desativado
      N8N_PORT: 5678
      N8N_SECURE_COOKIE: "false" # Desativa cookies seguros
      GENERIC_TIMEZONE: ${TZ} # Fuso horário
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_USER: ${POSTGRES_USER}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_POSTGRESDB_DATABASE: ${POSTGRES_DB}
      QUEUE_MODE: redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      N8N_LOG_LEVEL: info
      N8N_LOG_OUTPUT: file
      N8N_LOG_FILE_LOCATION: /home/node/.n8n/n8n.log
      NODE_ENV: production
    volumes:
      - n8n_data:/home/node/.n8n # Persistência de configurações
      - n8n_logs:/home/node/.n8n/logs # Persistência de logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5678/healthz || exit 1"] # Verifica endpoint de saúde
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - minha_rede

  # Evolution API: Integração com WhatsApp
  # Gerencia mensagens e interações via WhatsApp.
  evolution-api:
    image: atendai/evolution-api:latest
    container_name: evolution_api
    restart: unless-stopped
    ports:
      - "8080:8080" # Porta para API
    environment:
      AUTHENTICATION_TYPE: apikey
      AUTHENTICATION_API_KEY: ${EVOLUTION_API_KEY}
      DATABASE_ENABLED: "true"
      DATABASE_PROVIDER: postgresql
      DATABASE_CONNECTION_URI: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?schema=public
      CACHE_REDIS_ENABLED: "true"
      CACHE_REDIS_URI: redis://default:${REDIS_PASSWORD}@redis:6379/6
      CACHE_REDIS_PREFIX_KEY: evolution
      LOG_LEVEL: info
      WEBHOOK_GLOBAL_ENABLED: "true"
      CONFIG_SESSION_PHONE_NAME: "Evolution API"
    volumes:
      - evolution_data:/lab_evolution/instances # Persistência de instâncias
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"] # Verifica endpoint de saúde
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - minha_rede

  # Ollama: Execução de modelos de linguagem
  # Suporte a modelos de linguagem locais.
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    restart: unless-stopped
    ports:
      - "11434:11434" # Porta para API
    environment:
      OLLAMA_HOST: 0.0.0.0:11434
      OLLAMA_MODELS: /root/.ollama/models
      OLLAMA_KEEP_ALIVE: 5m
      OLLAMA_ORIGINS: "*" # Permite todas as origens (revisar em produção)
    volumes:
      - ollama_data:/root/.ollama # Persistência de modelos
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:11434/api/tags || exit 1"] # Verifica API
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - minha_rede

  # Prometheus: Sistema de monitoramento
  # Coleta e armazena métricas dos serviços.
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090" # Porta para interface web
    volumes:
      - prometheus_data:/prometheus # Persistência de dados
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - postgres_exporter
      - redis_exporter
      - node_exporter
    networks:
      - minha_rede

  # Node Exporter: Métricas do host
  # Coleta métricas do sistema operacional para o Prometheus.
  node_exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    restart: unless-stopped
    ports:
      - "9100:9100" # Porta para métricas
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - minha_rede

  # Grafana: Visualização de métricas e logs
  # Interface para dashboards e análise de dados.
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000" # Porta para interface web
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-piechart-panel,grafana-simple-json-datasource
      GF_ANALYTICS_REPORTING_ENABLED: "false"
      GF_LOG_LEVEL: info
    volumes:
      - grafana_data:/var/lib/grafana # Persistência de dados
    depends_on:
      - prometheus
      - loki
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - minha_rede

  # Loki: Sistema de logs
  # Armazena e gerencia logs dos serviços.
  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: unless-stopped
    ports:
      - "3100:3100" # Porta para API
    volumes:
      - loki_data:/loki # Persistência de logs
      - ./loki-config.yml:/etc/loki/loki.yml
    command:
      - '-config.file=/etc/loki/loki.yml'
    networks:
      - minha_rede

  # Promtail: Agente de coleta de logs
  # Envia logs do host para o Loki.
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    restart: unless-stopped
    volumes:
      - /var/log:/var/log:ro
      - ./promtail-config.yml:/etc/promtail/config.yml
    command:
      - '-config.file=/etc/promtail/config.yml'
    depends_on:
      - loki
    networks:
      - minha_rede

  # MinIO: Armazenamento de dados
  # Armazenamento compatível com objetos S3.
  minio:
    image: minio/minio:latest
    container_name: minio
    restart: unless-stopped
    ports:
      - "9000:9000" # Porta para API
      - "9001:9001" # Porta para consola web
    environment:
      MINIO_ROOT_USER: ${MINIO_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_PORT_ROOT_PASSWORD}
    volumes:
      - minio_data:/data # Persistencia de dados
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 3s
      retries: 3
    networks:
      - minha_rede

  # RabbitMQ: Sistema de mensagens de filas
  # Gerencia filas para comunicação assíncrona.
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672" # Porta AMQP
      - "15672:15672" # Porta para interface web (corrigida)
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: "/"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq # Persistência de dados
      - rabbitmq_logs:/var/log/rabbitmq # Persistência de logs
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - minha_rede

# Define volumes persistentes
# Mantém dados entre reinicializações dos contêineres.
volumes:
  postgres_data:
  postgres_backup:
  redis_data:
  n8n_data:
  n8n_logs:
  evolution_data:
  ollama_data:
  prometheus_data:
  grafana_data:
  loki_data:
  minio_data:
  rabbitmq_data:
  rabbitmq_logs:

# Define rede personalizada
# Rede em ponte para comunicação segura entre serviços.
networks:
  minha_rede:
    driver: bridge
